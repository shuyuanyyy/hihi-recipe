name: Recipe App Tests

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: web_app
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install pymongo first (includes bson)
          pip install pymongo==4.5.0
          pip install flask==2.3.3 python-dotenv==1.0.0 pytest==8.3.5 pytest-cov==6.1.1
      
      - name: Setup test database
        run: |
          python -c "
          from pymongo import MongoClient
          client = MongoClient('mongodb://localhost:27017/')
          db = client['recipe_database']
          # Create test collections
          db['recipes'].insert_many([
              {'name': 'Test Recipe 1', 'minutes': 30, 'tags': ['breakfast'], 
               'nutrition': {'calories': 300}, 'ingredients': ['eggs'], 'steps': ['mix']}
          ])
          db['user_information'].insert_one({'username': 'testuser', 'password': 'password'})
          db.create_collection('saved_recipes')
          print('Database setup complete')
          "
      
      - name: Run tests with coverage
        run: |
          # Create basic test directory if needed
          mkdir -p tests
          echo "# Package init" > tests/__init__.py
          
          # Create basic test file - note the proper indentation for YAML heredoc
          cat > tests/test_basic.py << 'EOL'
          import pytest

          def test_environment():
              """Basic test"""
              assert True

          def test_bson_import():
              """Test bson imports correctly"""
              from bson import ObjectId
              assert ObjectId() is not None
          EOL
          
          # Run tests
          pytest tests/ --cov=. -v
          
          # Report coverage
          coverage=$(pytest --cov=. | grep TOTAL | awk '{print $4}' | sed 's/%//') 
          echo "Coverage: $coverage%"
          
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Warning: Coverage below 80% threshold"
          fi
