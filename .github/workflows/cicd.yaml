name: Recipe App CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: web_app
    
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Directly install all required dependencies
          pip install flask==2.3.3
          pip install pymongo==4.5.0
          pip install python-dotenv==1.0.0
          pip install pytest==8.3.5
          pip install pytest-cov==6.1.1
          pip install pytest-flask==1.2.0
          pip install bson==0.5.10
      
      - name: Setup test database
        run: |
          echo "Setting up test MongoDB database..."
          python -c "
          try:
              from pymongo import MongoClient
              # Verify MongoDB connection is working
              client = MongoClient('mongodb://localhost:27017/', serverSelectionTimeoutMS=5000)
              client.server_info()  # Will throw an exception if connection fails
              print('Successfully connected to MongoDB')
              
              # Create database and collections
              db = client['recipe_database']
              
              # Create and populate recipes collection
              if 'recipes' not in db.list_collection_names():
                  print('Creating recipes collection...')
                  recipes = db['recipes']
                  recipes.insert_many([
                      {
                          'name': 'Test Recipe 1',
                          'minutes': 30,
                          'tags': ['breakfast', 'main-dish', 'easy'],
                          'nutrition': {'calories': 300},
                          'ingredients': ['eggs', 'milk', 'flour'],
                          'steps': ['mix', 'cook'],
                          'description': 'A test breakfast recipe'
                      },
                      {
                          'name': 'Test Recipe 2',
                          'minutes': 60,
                          'tags': ['lunch', 'dinner', 'main-dish', 'vegetarian'],
                          'nutrition': {'calories': 500},
                          'ingredients': ['pasta', 'tomato', 'cheese'],
                          'steps': ['boil pasta', 'make sauce', 'combine'],
                          'description': 'A test dinner recipe'
                      }
                  ])
              
              # Create and populate user information collection
              if 'user_information' not in db.list_collection_names():
                  print('Creating user_information collection...')
                  users = db['user_information']
                  users.insert_one({'username': 'testuser', 'password': 'password'})
              
              # Create saved_recipes collection
              if 'saved_recipes' not in db.list_collection_names():
                  print('Creating saved_recipes collection...')
                  db.create_collection('saved_recipes')
                  
              print('Database setup complete')
              
          except Exception as e:
              print(f'Error setting up database: {e}')
              import sys
              sys.exit(1)  # Exit with error code
          "
          echo "Database setup completed."
      
      - name: Run tests with coverage
        run: |
          # Make sure tests directory exists
          if [ ! -d "tests" ]; then
            echo "Creating tests directory..."
            mkdir -p tests
          fi
          
          # Ensure we have an __init__.py file in the tests directory
          if [ ! -f "tests/__init__.py" ]; then
            echo "Creating tests/__init__.py..."
            echo "# This file ensures the tests directory is treated as a Python package" > tests/__init__.py
          fi
          
          # Run the tests
          echo "Running tests with coverage..."
          pytest tests/ --cov=. --cov-report=term-missing || echo "Tests failed but continuing build"
          
          # Even if tests fail, we'll calculate coverage to see where we stand
          echo "Calculating test coverage..."
          coverage_output=$(pytest --cov=. | grep TOTAL || echo "TOTAL       0      0    0%")
          coverage=$(echo "$coverage_output" | awk '{print $4}' | sed 's/%//')
          echo "Current test coverage: $coverage%"
          
          # Check if we've hit our target
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Warning: Test coverage is below 80% ($coverage%)"
            # We'll continue the build but warn about low coverage
          else
            echo "Coverage requirement met: $coverage%"
          fi
